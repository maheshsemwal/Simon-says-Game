// Initialize game variables
let gameseq = [] // Stores the sequence of colors generated by the game.
let userseq = [] // Stores the sequence of colors clicked by the user.
let started = false // Tracks whether the game has started.
let level = 0 // Tracks the current level.
let h3 = document.querySelector('h3') // Reference to the <h3> element.
let btn = ["yellow", "red", "blue", "green"] // Array of color names.

// Function to reset the game variables to their initial state.
function resetGame(){
    gameseq = []
    userseq = []
    started = false
    level = 0
}

// Event listener for keypress to start the game.
document.addEventListener('keypress', function () {
    start()
})

// Function to start the game.
function start(){
    document.getElementById('clear').style.display = "block";
    document.getElementById("front").style.display = "none"; // Hide the start screen.
    document.getElementById("win").style.display = "none"; // Hide the win message.
    // Delay starting the game to provide a smooth transition.
    setTimeout(function(){
        if (!started) {
            started = true
            levelup()
        }
    }, 1000);
}

// Function to add a flashing effect to a button.
function gameflash(btn){
    btn.classList.add("flash");
    setTimeout(function(){
        btn.classList.remove("flash");
    }, 250);
}

// Function to add a flashing effect to a user-clicked button.
function userflash(btn){
    btn.classList.add("userflash");
    setTimeout(function(){
        btn.classList.remove("userflash");
    }, 250);
}

// Function to increase the level of the game.
function levelup(){
    level++;
    h3.innerText = `Level ${level}`
    
    // Generate a random color and flash the corresponding button.
    let randomIn = Math.floor(Math.random() * 4); 
    let randcolor = btn[randomIn];
    let randbtn = document.querySelector(`.${randcolor}`);
    gameflash(randbtn)
    gameseq.push(randcolor);
    console.log(gameseq);
}

// Event listeners for button clicks.
let allbtn = document.querySelectorAll('.btn');
for(b of allbtn){
    b.addEventListener('click', btnpress);
}

// Function to handle button clicks by the user.
function btnpress(){
    if(!started){
        return; // If the game hasn't started, ignore the button click.
    }
    userflash(this);
    let btncolor = this.id;
    userseq.push(btncolor);
    console.log(userseq);
    
    if(matchseq()){
        console.log("success");
        if(userseq.length === gameseq.length){
            if(level == 13){
                document.getElementById("win").style.display = "block";
                let win = new Audio("win.wav");
                win.play();
                resetGame();
                return;
            }
            // Delay advancing to the next level to provide a smooth transition.
            setTimeout(function(){
                levelup();
            }, 1000);
            userseq = [];
        }
    }else{
        console.log("fail");
        h3.innerText = "Game Over, Press Any Key to Restart";
        document.getElementById('clear').style.display = "none";
        let wrong = new Audio("wrong.wav");
        wrong.play();
        resetGame();
    }
}

// Function to check if the user's sequence matches the game's sequence.
function matchseq(){
    for(let i = 0; i < userseq.length; i++){
        if(userseq[i] !== gameseq[i]){
            return false; // If there's a mismatch, return false.
        }
    }
    return true; // If the sequences match, return true.
}
